package com.peterfranza.propertytranslator;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Map.Entry;
import java.util.Properties;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.shared.model.fileset.FileSet;
import org.apache.maven.shared.model.fileset.util.FileSetManager;

@Mojo(name = "generate-languages",
        defaultPhase = LifecyclePhase.GENERATE_RESOURCES)
public class PropertyTranslationGenerator extends AbstractMojo {

	@Parameter(required=true)
    private FileSet fileset;

	@Parameter(alias="translator", required=true)
	TranslatorConfig[] translators; 
	
	//https://en.wikipedia.org/wiki/XLIFF
	@Parameter
	File xliffData;
	
	@Parameter(required=true)
	String sourceLanguage;
	
	private FileSetManager fileSetManager = new FileSetManager();
	
	public void execute() throws MojoExecutionException, MojoFailureException {

		try {
		for(TranslatorConfig t: translators) {
			getLog().info("TT: " + t.type.name() + "  " + t.targetLanguage);
		}
		
		File root = new File(fileset.getDirectory());
		
		for(String f: fileSetManager.getIncludedFiles(fileset)) {
			FileInputStream fis = new FileInputStream(new File(root, f));

			getLog().info("Processing: " + f);
			Properties source = new Properties();
			source.load(fis);

			Properties target = new Properties();
			for(TranslatorConfig t: translators) {
				FileOutputStream fout = new FileOutputStream(new File(root, f.replace(sourceLanguage, t.targetLanguage)));
				for(Entry<Object, Object> entry: source.entrySet()) {
					target.setProperty(entry.getKey().toString(), 
							t.type.getTranslator().translate(entry.getValue().toString()));
				}

				target.store(fout, "Generated by the PropertyTranslationGenerator maven plugin");
				fout.close();
			}
			fis.close();

		}
		
		} catch(Exception e) {
			throw new MojoFailureException("Error processing translations", e);
		}
	}

}
